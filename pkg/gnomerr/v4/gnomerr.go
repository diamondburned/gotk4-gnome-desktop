// Code generated by girgen. DO NOT EDIT.

package gnomerr

import (
	"fmt"
	_ "runtime/cgo"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gnome-rr-4 gnome-desktop-4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeDpmsModeType = coreglib.Type(C.gnome_rr_dpms_mode_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDpmsModeType, F: marshalDpmsModeType},
	})
}

type DpmsModeType C.gint

const (
	RrDpmsOn DpmsModeType = iota
	RrDpmsStandby
	RrDpmsSuspend
	RrDpmsOff
	RrDpmsUnknown
)

func marshalDpmsModeType(p uintptr) (interface{}, error) {
	return DpmsModeType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for DpmsModeType.
func (d DpmsModeType) String() string {
	switch d {
	case RrDpmsOn:
		return "On"
	case RrDpmsStandby:
		return "Standby"
	case RrDpmsSuspend:
		return "Suspend"
	case RrDpmsOff:
		return "Off"
	case RrDpmsUnknown:
		return "Unknown"
	default:
		return fmt.Sprintf("DpmsModeType(%d)", d)
	}
}
