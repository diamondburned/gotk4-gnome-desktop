// Code generated by girgen. DO NOT EDIT.

package gnomerr

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeOutputInfo = coreglib.Type(C.gnome_rr_output_info_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeOutputInfo, F: marshalOutputInfo},
	})
}

// OutputInfoOverrides contains methods that are overridable.
type OutputInfoOverrides struct {
}

func defaultOutputInfoOverrides(v *OutputInfo) OutputInfoOverrides {
	return OutputInfoOverrides{}
}

// OutputInfo: representation of an output, which can be used for querying and
// setting display state.
type OutputInfo struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*OutputInfo)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*OutputInfo, *OutputInfoClass, OutputInfoOverrides](
		GTypeOutputInfo,
		initOutputInfoClass,
		wrapOutputInfo,
		defaultOutputInfoOverrides,
	)
}

func initOutputInfoClass(gclass unsafe.Pointer, overrides OutputInfoOverrides, classInitFunc func(*OutputInfoClass)) {
	if classInitFunc != nil {
		class := (*OutputInfoClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapOutputInfo(obj *coreglib.Object) *OutputInfo {
	return &OutputInfo{
		Object: obj,
	}
}

func marshalOutputInfo(p uintptr) (interface{}, error) {
	return wrapOutputInfo(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function returns the following values:
//
func (self *OutputInfo) AspectRatio() float64 {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret C.double             // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_get_aspect_ratio(_arg0)
	runtime.KeepAlive(self)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// The function returns the following values:
//
//   - utf8: display name of this output.
//
func (self *OutputInfo) DisplayName() string {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret *C.char              // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_get_display_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Geometry: get the geometry for the monitor connected to the specified output.
//
// If the monitor is a tiled monitor, it returns the geometry for the complete
// monitor.
//
// The function returns the following values:
//
//   - x (optional)
//   - y (optional)
//   - width (optional)
//   - height (optional)
//
func (self *OutputInfo) Geometry() (x, y, width, height int) {
	var _arg0 *C.GnomeRROutputInfo // out
	var _arg1 C.int                // in
	var _arg2 C.int                // in
	var _arg3 C.int                // in
	var _arg4 C.int                // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.gnome_rr_output_info_get_geometry(_arg0, &_arg1, &_arg2, &_arg3, &_arg4)
	runtime.KeepAlive(self)

	var _x int      // out
	var _y int      // out
	var _width int  // out
	var _height int // out

	_x = int(_arg1)
	_y = int(_arg2)
	_width = int(_arg3)
	_height = int(_arg4)

	return _x, _y, _width, _height
}

// Name retrieves the output name.
//
// The function returns the following values:
//
//   - utf8: output name.
//
func (self *OutputInfo) Name() string {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret *C.char              // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_get_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function returns the following values:
//
func (self *OutputInfo) PreferredHeight() int {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret C.int                // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_get_preferred_height(_arg0)
	runtime.KeepAlive(self)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// The function returns the following values:
//
func (self *OutputInfo) PreferredWidth() int {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret C.int                // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_get_preferred_width(_arg0)
	runtime.KeepAlive(self)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// The function returns the following values:
//
func (self *OutputInfo) Primary() bool {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_get_primary(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
func (self *OutputInfo) Product() string {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret *C.char              // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_get_product(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function returns the following values:
//
func (self *OutputInfo) RefreshRate() int {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret C.int                // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_get_refresh_rate(_arg0)
	runtime.KeepAlive(self)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// The function returns the following values:
//
func (self *OutputInfo) Rotation() Rotation {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret C.GnomeRRRotation    // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_get_rotation(_arg0)
	runtime.KeepAlive(self)

	var _rotation Rotation // out

	_rotation = Rotation(_cret)

	return _rotation
}

// The function returns the following values:
//
func (self *OutputInfo) Serial() string {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret *C.char              // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_get_serial(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function returns the following values:
//
func (self *OutputInfo) Underscanning() bool {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_get_underscanning(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//   - utf8 output's vendor string.
//
func (self *OutputInfo) Vendor() string {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret *C.char              // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_get_vendor(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function returns the following values:
//
//   - ok: whether there is a CRTC assigned to this output (i.e. a signal is
//     being sent to it).
//
func (self *OutputInfo) IsActive() bool {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_is_active(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//   - ok: whether the output is physically connected to a monitor.
//
func (self *OutputInfo) IsConnected() bool {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_is_connected(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//   - ok: TRUE if the specified output is connected to the primary tile of a
//     monitor or to an untiled monitor, FALSE if the output is connected to a
//     secondary tile.
//
func (self *OutputInfo) IsPrimaryTile() bool {
	var _arg0 *C.GnomeRROutputInfo // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gnome_rr_output_info_is_primary_tile(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
func (self *OutputInfo) SetActive(active bool) {
	var _arg0 *C.GnomeRROutputInfo // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if active {
		_arg1 = C.TRUE
	}

	C.gnome_rr_output_info_set_active(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(active)
}

// SetGeometry: set the geometry for the monitor connected to the specified
// output.
//
// If the monitor is a tiled monitor, it sets the geometry for the complete
// monitor.
//
// The function takes the following parameters:
//
//   - x offset for monitor.
//   - y offset for monitor.
//   - width: monitor width.
//   - height: monitor height.
//
func (self *OutputInfo) SetGeometry(x, y, width, height int) {
	var _arg0 *C.GnomeRROutputInfo // out
	var _arg1 C.int                // out
	var _arg2 C.int                // out
	var _arg3 C.int                // out
	var _arg4 C.int                // out

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.int(x)
	_arg2 = C.int(y)
	_arg3 = C.int(width)
	_arg4 = C.int(height)

	C.gnome_rr_output_info_set_geometry(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(self)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// The function takes the following parameters:
//
func (self *OutputInfo) SetPrimary(primary bool) {
	var _arg0 *C.GnomeRROutputInfo // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if primary {
		_arg1 = C.TRUE
	}

	C.gnome_rr_output_info_set_primary(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(primary)
}

// The function takes the following parameters:
//
func (self *OutputInfo) SetRefreshRate(rate int) {
	var _arg0 *C.GnomeRROutputInfo // out
	var _arg1 C.int                // out

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.int(rate)

	C.gnome_rr_output_info_set_refresh_rate(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(rate)
}

// The function takes the following parameters:
//
func (self *OutputInfo) SetRotation(rotation Rotation) {
	var _arg0 *C.GnomeRROutputInfo // out
	var _arg1 C.GnomeRRRotation    // out

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.GnomeRRRotation(rotation)

	C.gnome_rr_output_info_set_rotation(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(rotation)
}

// The function takes the following parameters:
//
func (self *OutputInfo) SetUnderscanning(underscanning bool) {
	var _arg0 *C.GnomeRROutputInfo // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if underscanning {
		_arg1 = C.TRUE
	}

	C.gnome_rr_output_info_set_underscanning(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(underscanning)
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (self *OutputInfo) SupportsRotation(rotation Rotation) bool {
	var _arg0 *C.GnomeRROutputInfo // out
	var _arg1 C.GnomeRRRotation    // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GnomeRROutputInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.GnomeRRRotation(rotation)

	_cret = C.gnome_rr_output_info_supports_rotation(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(rotation)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// OutputInfoClass: instance of this type is always passed by reference.
type OutputInfoClass struct {
	*outputInfoClass
}

// outputInfoClass is the struct that's finalized.
type outputInfoClass struct {
	native *C.GnomeRROutputInfoClass
}
