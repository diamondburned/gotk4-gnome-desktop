// Code generated by girgen. DO NOT EDIT.

package gnomerr

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
import "C"

//export _gotk4_gnomerr4_Screen_ConnectOutputConnected
func _gotk4_gnomerr4_Screen_ConnectOutputConnected(arg0 C.gpointer, arg1 *C.GnomeRROutput, arg2 C.guintptr) {
	var f func(output *Output)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(output *Output))
	}

	var _output *Output // out

	_output = (*Output)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	f(_output)
}

//export _gotk4_gnomerr4_Screen_ConnectOutputDisconnected
func _gotk4_gnomerr4_Screen_ConnectOutputDisconnected(arg0 C.gpointer, arg1 *C.GnomeRROutput, arg2 C.guintptr) {
	var f func(output *Output)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(output *Output))
	}

	var _output *Output // out

	_output = (*Output)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	f(_output)
}
