// Code generated by girgen. DO NOT EDIT.

package gnomedesktop

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
)

// #include <stdlib.h>
import "C"

// DesktopThumbnailIsValid returns whether the thumbnail has the correct uri and
// mtime embedded in the png options. This function is threadsafe and does no
// blocking I/O.
//
// The function takes the following parameters:
//
//   - pixbuf: loaded thumbnail Pixbuf.
//   - uri: uri.
//   - mtime: mtime.
//
// The function returns the following values:
//
//   - ok: TRUE if the thumbnail has the right uri and mtime.
//
func DesktopThumbnailIsValid(pixbuf *gdkpixbuf.Pixbuf, uri string, mtime int32) bool {
	var _arg1 *C.GdkPixbuf // out
	var _arg2 *C.char      // out
	var _arg3 C.time_t     // out
	var _cret C.gboolean   // in

	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(coreglib.InternObject(pixbuf).Native()))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.time_t(mtime)

	_cret = C.gnome_desktop_thumbnail_is_valid(_arg1, _arg2, _arg3)
	runtime.KeepAlive(pixbuf)
	runtime.KeepAlive(uri)
	runtime.KeepAlive(mtime)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DesktopThumbnailPathForURI returns the filename that a thumbnail of size size
// for uri would have. This function is threadsafe and does no blocking I/O.
//
// The function takes the following parameters:
//
//   - uri: uri.
//   - size: thumbnail size.
//
// The function returns the following values:
//
//   - utf8: absolute filename.
//
func DesktopThumbnailPathForURI(uri string, size DesktopThumbnailSize) string {
	var _arg1 *C.char                     // out
	var _arg2 C.GnomeDesktopThumbnailSize // out
	var _cret *C.char                     // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.GnomeDesktopThumbnailSize(size)

	_cret = C.gnome_desktop_thumbnail_path_for_uri(_arg1, _arg2)
	runtime.KeepAlive(uri)
	runtime.KeepAlive(size)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
