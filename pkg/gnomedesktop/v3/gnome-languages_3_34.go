// Code generated by girgen. DO NOT EDIT.

package gnomedesktop

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
import "C"

// GetTranslatedModifier gets a translation of the raw modifier string.
// If translation is provided the returned string is translated accordingly.
//
// The function takes the following parameters:
//
//   - modifier part of a locale name.
//   - translation (optional): locale string.
//
// The function returns the following values:
//
//   - utf8: translated modifier string. Caller takes ownership.
//
func GetTranslatedModifier(modifier, translation string) string {
	var _arg1 *C.char // out
	var _arg2 *C.char // out
	var _cret *C.char // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(modifier)))
	defer C.free(unsafe.Pointer(_arg1))
	if translation != "" {
		_arg2 = (*C.char)(unsafe.Pointer(C.CString(translation)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.gnome_get_translated_modifier(_arg1, _arg2)
	runtime.KeepAlive(modifier)
	runtime.KeepAlive(translation)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
