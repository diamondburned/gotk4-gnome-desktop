// Code generated by girgen. DO NOT EDIT.

package gnomedesktop

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypePnpIDs = coreglib.Type(C.gnome_pnp_ids_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePnpIDs, F: marshalPnpIDs},
	})
}

// PnpIDsOverrides contains methods that are overridable.
type PnpIDsOverrides struct {
}

func defaultPnpIDsOverrides(v *PnpIDs) PnpIDsOverrides {
	return PnpIDsOverrides{}
}

type PnpIDs struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*PnpIDs)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*PnpIDs, *PnpIDsClass, PnpIDsOverrides](
		GTypePnpIDs,
		initPnpIDsClass,
		wrapPnpIDs,
		defaultPnpIDsOverrides,
	)
}

func initPnpIDsClass(gclass unsafe.Pointer, overrides PnpIDsOverrides, classInitFunc func(*PnpIDsClass)) {
	if classInitFunc != nil {
		class := (*PnpIDsClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapPnpIDs(obj *coreglib.Object) *PnpIDs {
	return &PnpIDs{
		Object: obj,
	}
}

func marshalPnpIDs(p uintptr) (interface{}, error) {
	return wrapPnpIDs(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewPnpIDs returns a reference to a PnpIds object, or creates a new one if
// none have been created.
//
// The function returns the following values:
//
//   - pnpIds PnpIds object.
//
func NewPnpIDs() *PnpIDs {
	var _cret *C.GnomePnpIds // in

	_cret = C.gnome_pnp_ids_new()

	var _pnpIds *PnpIDs // out

	_pnpIds = wrapPnpIDs(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _pnpIds
}

// PnpID: find the full manufacturer name for the given PNP ID.
//
// The function takes the following parameters:
//
//   - pnpId: PNP ID to look for.
//
// The function returns the following values:
//
//   - utf8: new string representing the manufacturer name, or NULL when not
//     found.
//
func (pnpIds *PnpIDs) PnpID(pnpId string) string {
	var _arg0 *C.GnomePnpIds // out
	var _arg1 *C.gchar       // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GnomePnpIds)(unsafe.Pointer(coreglib.InternObject(pnpIds).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(pnpId)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gnome_pnp_ids_get_pnp_id(_arg0, _arg1)
	runtime.KeepAlive(pnpIds)
	runtime.KeepAlive(pnpId)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// PnpIDsClass: instance of this type is always passed by reference.
type PnpIDsClass struct {
	*pnpIDsClass
}

// pnpIDsClass is the struct that's finalized.
type pnpIDsClass struct {
	native *C.GnomePnpIdsClass
}
