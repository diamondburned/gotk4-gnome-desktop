// Code generated by girgen. DO NOT EDIT.

package gnomedesktop

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeWallClock = coreglib.Type(C.gnome_wall_clock_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWallClock, F: marshalWallClock},
	})
}

// WallClockOverrides contains methods that are overridable.
type WallClockOverrides struct {
}

func defaultWallClockOverrides(v *WallClock) WallClockOverrides {
	return WallClockOverrides{}
}

type WallClock struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*WallClock)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*WallClock, *WallClockClass, WallClockOverrides](
		GTypeWallClock,
		initWallClockClass,
		wrapWallClock,
		defaultWallClockOverrides,
	)
}

func initWallClockClass(gclass unsafe.Pointer, overrides WallClockOverrides, classInitFunc func(*WallClockClass)) {
	if classInitFunc != nil {
		class := (*WallClockClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapWallClock(obj *coreglib.Object) *WallClock {
	return &WallClock{
		Object: obj,
	}
}

func marshalWallClock(p uintptr) (interface{}, error) {
	return wrapWallClock(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewWallClock creates a new WallClock.
//
// The function returns the following values:
//
//   - wallClock: new clock.
//
func NewWallClock() *WallClock {
	var _cret *C.GnomeWallClock // in

	_cret = C.gnome_wall_clock_new()

	var _wallClock *WallClock // out

	_wallClock = wrapWallClock(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _wallClock
}

// Clock returns the string representing the current time of this clock
// according to the user settings.
//
// The function returns the following values:
//
//   - utf8: time of the clock as a string. This string points to internally
//     allocated storage and must not be freed, modified or stored.
//
func (clock *WallClock) Clock() string {
	var _arg0 *C.GnomeWallClock // out
	var _cret *C.char           // in

	_arg0 = (*C.GnomeWallClock)(unsafe.Pointer(coreglib.InternObject(clock).Native()))

	_cret = C.gnome_wall_clock_get_clock(_arg0)
	runtime.KeepAlive(clock)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Timezone returns the current local time zone used by this clock.
//
// The function returns the following values:
//
//   - timeZone of the clock.
//
func (clock *WallClock) Timezone() *glib.TimeZone {
	var _arg0 *C.GnomeWallClock // out
	var _cret *C.GTimeZone      // in

	_arg0 = (*C.GnomeWallClock)(unsafe.Pointer(coreglib.InternObject(clock).Native()))

	_cret = C.gnome_wall_clock_get_timezone(_arg0)
	runtime.KeepAlive(clock)

	var _timeZone *glib.TimeZone // out

	_timeZone = (*glib.TimeZone)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.g_time_zone_ref(_cret)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_timeZone)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_time_zone_unref((*C.GTimeZone)(intern.C))
		},
	)

	return _timeZone
}

// WallClockClass: instance of this type is always passed by reference.
type WallClockClass struct {
	*wallClockClass
}

// wallClockClass is the struct that's finalized.
type wallClockClass struct {
	native *C.GnomeWallClockClass
}
